name: CI

on:
  pull_request:
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest

    env:
      DB_DATABASE: test_db
      DB_USER: root
      DB_PASSWORD: root

    steps:
      - name: Setup MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "adopt"
          cache: "gradle"

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      - name: Build and Test
        run: ./gradlew build -PtestProfile=test-github --info

#      - name: If build Success
#        if: ${{ success() }}
#        uses: actions/github-script@v7
#        with:
#          github-token: ${{ secrets.PAT }}
#          script: |
#            const pull_number = ${{ github.event.pull_request.number }}
#            const updated_title = `[BUILD SUCCESS] ${{ github.event.pull_request.title }}`
#            await github.rest.pulls.createReview({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              pull_number: pull_number,
#              body: 'Build ì„±ê³µ ðŸ˜Š',
#              event: 'COMMENT'
#            })
#
#      - name: If build fail
#        if: ${{ failure() }}
#        uses: actions/github-script@v7
#        with:
#          github-token: ${{ secrets.PAT }}
#          script: |
#            const pull_number = ${{ github.event.pull_request.number }}
#            const updated_title = `[BUILD FAIL] ${{ github.event.pull_request.title }}`
#            await github.rest.pulls.createReview({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              pull_number: pull_number,
#              body: 'Build ì‹¤íŒ¨ ðŸ˜Ÿ',
#              event: 'REQUEST_CHANGES'
#            })